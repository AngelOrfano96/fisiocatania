<div class="d-flex align-items-center justify-content-between flex-wrap gap-3 mb-3">
  <h3 class="m-0">RESOCONTO GIORNALIERO</h3>


  <div class="d-flex align-items-end gap-2">
    <form class="d-flex align-items-end gap-2" method="GET" action="/reportistica">
      <div>
        <label for="giorno" class="form-label mb-1">Giornata</label>
        <input type="date" id="giorno" name="date" class="form-control" value="<%= giorno %>" required>
      </div>
      <button class="btn btn-primary" type="submit">Mostra</button>
    </form>

    <button id="btnCopiaIeri" class="btn btn-outline-secondary" data-date="<%= giorno %>" title="Copia le sigle da ieri nelle celle vuote">
      Copia da ieri
    </button>
     <!-- NEW: reorder controls -->
  <button id="btnReorder" class="btn btn-outline-dark">Ordina colonne</button>
  <button id="btnSaveOrder" class="btn btn-success d-none">Salva ordine</button>
  <button id="btnCancelOrder" class="btn btn-secondary d-none">Annulla</button>
  </div>
</div>

<!-- Legenda -->
<div class="d-flex align-items-center flex-wrap gap-2 mb-3">
  <span class="me-2">Legenda:</span>
  <span class="badge-sigla badge-sigla-d">D</span>
  <span class="badge-sigla badge-sigla-dg">D (GRADUALE)</span>
  <span class="badge-sigla badge-sigla-i">I</span>
  <span class="badge-sigla badge-sigla-dv">DV</span>
</div>

<!-- Export -->
<form class="d-flex align-items-end gap-2 mb-3" method="GET" action="/reportistica/export">
  <div>
    <label for="from" class="form-label mb-1">Esporta da</label>
    <input type="date" id="from" name="from" class="form-control" value="<%= giorno %>" required>
  </div>
  <div>
    <label for="to" class="form-label mb-1">a</label>
    <input type="date" id="to" name="to" class="form-control" value="<%= giorno %>" required>
  </div>
  <button class="btn btn-outline-primary" type="submit">ðŸ“Š Esporta Excel</button>
</form>

<!-- Griglia -->
<div class="table-responsive table-scroll">
  <table class="table table-bordered align-middle m-0">
<thead class="table-dark sticky-top z-3">
  <tr id="th-row">
    <th class="sticky-col bg-light text-nowrap col-calciatori" data-fixed="1">Calciatori</th>
    <% distretti.forEach(d => { %>
      <th class="text-center text-nowrap col-head" data-id="<%= d.id %>"><%= d.nome %></th>
    <% }) %>
  </tr>
</thead>
<tbody id="tb-body">
  <% anagrafiche.forEach(a => { %>
    <tr class="body-row">
      <th class="sticky-col bg-light fw-semibold text-nowrap" data-fixed="1"><%= a.cognome %> <%= a.nome %></th>
      <% distretti.forEach(d => { 
           const key = `${a.id}|${d.id}`;
           const val = sigleMap[key] || '';
      %>
        <td class="text-center col-cell" data-id="<%= d.id %>">
          <!-- tuo select + badge -->
          <div class="d-flex justify-content-center align-items-center gap-2">
            <select
              class="form-select form-select-sm w-auto cell-select"
              data-anagrafica-id="<%= a.id %>"
              data-distretto-id="<%= d.id %>"
              data-date="<%= giorno %>">
              <option value="" <%= val===''?'selected':'' %> >â€”</option>
              <option value="D" <%= val==='D'?'selected':'' %>>D</option>
              <option value="D (GRADUALE)" <%= val==='D (GRADUALE)'?'selected':'' %>>D (GRADUALE)</option>
              <option value="I" <%= val==='I'?'selected':'' %>>I</option>
              <option value="DV" <%= val==='DV'?'selected':'' %>>DV</option>
            </select>
            <span class="badge-sigla <%= val==='D' ? 'badge-sigla-d' 
                                   : val==='D (GRADUALE)' ? 'badge-sigla-dg'
                                   : val==='I' ? 'badge-sigla-i'
                                   : val==='DV' ? 'badge-sigla-dv' : 'd-none' %>"
                  data-badge="1"><%= val %></span>
          </div>
        </td>
      <% }) %>
    </tr>
  <% }) %>
</tbody>
  </table>
</div>

<!-- Styles -->


<!-- Script -->
<script>
  // Upsert immediato quando cambia una cella
  document.querySelectorAll('.cell-select').forEach(sel => {
    sel.addEventListener('change', async (e) => {
      const el = e.currentTarget;
      const payload = {
        date: el.dataset.date,
        anagrafica_id: el.dataset.anagraficaId,
        distretto_id:  el.dataset.distrettoId,
        sigla: el.value
      };

      try {
        const res = await fetch('/api/reportistica/upsert', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });
        if (!res.ok) throw new Error(await res.text());

        // Aggiorna badge visivo
        const badge = el.parentElement.querySelector('[data-badge]');
        badge.className = 'badge-sigla d-none';
        badge.textContent = '';
        if (el.value) {
          badge.textContent = el.value;
          if (el.value === 'D')               badge.className = 'badge-sigla badge-sigla-d';
          else if (el.value === 'D (GRADUALE)') badge.className = 'badge-sigla badge-sigla-dg';
          else if (el.value === 'I')          badge.className = 'badge-sigla badge-sigla-i';
          else if (el.value === 'DV')         badge.className = 'badge-sigla badge-sigla-dv';
        }
      } catch (err) {
        alert('Errore salvataggio: ' + err.message);
      }
    });
  });

  // Copia da ieri â†’ riempie solo celle vuote
  document.getElementById('btnCopiaIeri')?.addEventListener('click', async (e) => {
    const to_date = e.currentTarget.dataset.date;
    if (!to_date) return;
    e.currentTarget.disabled = true;
    try {
      const res = await fetch('/api/reportistica/copia', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ to_date })
      });
      if (!res.ok) throw new Error(await res.text());
      location.reload();
    } catch (err) {
      alert('Errore copia: ' + err.message);
    } finally {
      e.currentTarget.disabled = false;
    }
  });
</script>
<script>
  // === REORDER UI (mobile + desktop) ===
  const btnReorder  = document.getElementById('btnReorder');
  const btnSave     = document.getElementById('btnSaveOrder');
  const btnCancel   = document.getElementById('btnCancelOrder');
  const thRow       = document.getElementById('th-row');
  const bodyRows    = Array.from(document.querySelectorAll('#tb-body .body-row'));

  let sortableHeader = null;
  let initialHeaderOrder = [];

  function currentHeaderIds(){
    return Array.from(thRow.querySelectorAll('th.col-head')).map(th => Number(th.dataset.id));
  }

  function applyOrderToDom(orderIds){
    bodyRows.forEach(tr => {
      const tds  = Array.from(tr.querySelectorAll('td.col-cell'));
      const byId = new Map(tds.map(td => [Number(td.dataset.id), td]));
      const frag = document.createDocumentFragment();
      orderIds.forEach(id => { if (byId.has(id)) frag.appendChild(byId.get(id)); });
      tr.appendChild(frag);
    });
  }

  function enableDrag(){
    initialHeaderOrder = currentHeaderIds();

    // attivo Sortable solo sulle th con classe col-head (la prima colonna "Calciatori" non Ã¨ draggable)
    sortableHeader = new Sortable(thRow, {
      draggable: 'th.col-head',
      animation: 150,
      onEnd: () => {
        // ogni volta che rilascio, riordino anche le celle del body
        applyOrderToDom(currentHeaderIds());
      }
    });

    btnReorder.classList.add('d-none');
    btnSave.classList.remove('d-none');
    btnCancel.classList.remove('d-none');
  }

  function disableDrag(reset=false){
    if (sortableHeader){ sortableHeader.destroy(); sortableHeader = null; }
    if (reset){ applyOrderToDom(initialHeaderOrder); }
    btnReorder.classList.remove('d-none');
    btnSave.classList.add('d-none');
    btnCancel.classList.add('d-none');
  }

  btnReorder?.addEventListener('click', enableDrag);
  btnCancel?.addEventListener('click', () => disableDrag(true));
  btnSave?.addEventListener('click', async () => {
    const order = currentHeaderIds();
    try {
      const res = await fetch('/api/reportistica/columns-order', {
        method: 'POST',
        headers: {'Content-Type':'application/json'},
        body: JSON.stringify({ order })
      });
      if (!res.ok) throw new Error(await res.text());
      disableDrag(false);
      location.reload(); // garantisce coerenza con lâ€™ordine server/export
    } catch (err) {
      alert('Errore nel salvataggio ordine colonne: ' + err.message);
    }
  });
</script>

<style>
  /* migliora feedback tocco/drag */
  th.col-head { cursor: grab; touch-action: none; }
  .table-responsive { -webkit-overflow-scrolling: touch; }
</style>


<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.2/Sortable.min.js"></script>
